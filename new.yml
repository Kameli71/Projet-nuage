---
- hosts: all:localhost  # Place where we are running Ansible
  connection: local # Connection 
  gather_facts: no

  # Variables
  vars:
    ansible_python_interpreter: /usr/bin/python3
    # Default Names
    title: "Karim"
    vpc_id: "vpc-07a737571d3a10d7d"
    igw_name: "{{ title }} IGW"
    subnet_name: "{{ title }} Subnet priv"
    acl_name: "{{ title }} ACL VPC-C(NE PAS SUPPRIMER)"
    instance_name: "{{ title }} Instance Infra" 
    security_group_name: "{{ title }} Security Group Infra"
    nat_name : "{{ title }} NAT VPC-C (Ne pas supprimer)"
    route_table_name: "{{ title }} Route Table Infra"

    # Default values for CIDR Blocks
    vpcCidrBlock: "10.0.0.0/16"
    subNetCidrBlock: "10.0.39.0/24"
    subNetCidrBlock2: "10.0.40.0/24"
    subNetCidrBlock3: "10.0.41.0/24"
    subNetCidrBlock4: "10.0.42.0/24"
    portCidrBlock: "0.0.0.0/0"
    destinationCidrBlock: "0.0.0.0/0"

    # State
    state: "present"

    # Default value of AZ & Regio
    zone: "us-east-1a"
    zone2: "us-east-1b"
    region: "us-east-1"

  # List of tasks
  tasks:
    - name: Get my current IP address
      uri:
        url: http://checkip.amazonaws.com/
        return_content: yes
      register: my_ip

    - name: Create Subnet priv
      ec2_vpc_subnet:
        vpc_id: "{{ vpc_id }}" 
        region: "{{ region }}"
        state: "{{ state }}"
        az: "{{ zone }}"  
        cidr: "{{ subNetCidrBlock }}"
        map_public: "yes"
        resource_tags:
          Name: "{{ subnet_name }}"
      register: subnet_result

    - name: Create Subnet priv2
      ec2_vpc_subnet:
        vpc_id: "{{ vpc_id }}" 
        region: "{{ region }}"
        state: "{{ state }}"
        az: "{{ zone }}"  
        cidr: "{{ subNetCidrBlock2 }}"
        map_public: "yes"
        resource_tags:
          Name: "{{ subnet_name }} 2"
      register: subnet_result1

    - name: Create Subnet priv3
      ec2_vpc_subnet:
        vpc_id: "{{ vpc_id }}" 
        region: "{{ region }}"
        state: "{{ state }}"
        az: "{{ zone2 }}"  
        cidr: "{{ subNetCidrBlock3 }}"
        map_public: "yes"
        resource_tags:
          Name: "{{ subnet_name }} 3"
      register: subnet_result2

    - name: Create Subnet priv4
      ec2_vpc_subnet:
        vpc_id: "{{ vpc_id }}" 
        region: "{{ region }}"
        state: "{{ state }}"
        az: "{{ zone2 }}"  
        cidr: "{{ subNetCidrBlock4}}"
        map_public: "yes"
        resource_tags:
          Name: "{{ subnet_name }} 4"
      register: subnet_result3

    - name: Create Security Group
      ec2_group:  
        name: "{{ security_group_name }}"
        description: "{{ security_group_name }}"
        vpc_id: "{{ vpc_id }}" 
        region: "{{ region }}"
        state: "{{ state }}"
        tags:
          Name: "{{ security_group_name  }}"
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: "{{ my_ip.content | replace('\n', '') }}/32"
          - proto: tcp
            from_port: 443
            to_port: 443
            cidr_ip: "{{ my_ip.content | replace('\n', '') }}/32"
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: "{{ my_ip.content | replace('\n', '') }}/32"
        rules_egress:
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: "{{ portCidrBlock }}"
          - proto: tcp
            from_port: 443
            to_port: 443
            cidr_ip: "{{ portCidrBlock }}"
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: "{{ portCidrBlock }}"
      register: security_group_result

    - name: Create Network ACLs
      ec2_vpc_nacl:
        name: "{{ acl_name }}"
        vpc_id: "{{ vpc_id }}" 
        region: "{{ region }}"
        state: "{{ state }}" 
        subnets: [ "{{ subnet_result.subnet.id }}" ]
        tags:
          Name: "{{ acl_name }}"
        ingress:
        # rule no, protocol, allow/deny, cidr, icmp_type, icmp_code,             port from, port to
          - [100, 'tcp', 'allow', '0.0.0.0/0', null, null, 0, 65535]
          
        # rule no, protocol, allow/deny, cidr, icmp_type, icmp_code, port from, port to
        egress:
          - [100, 'all', 'allow', '0.0.0.0/0', null, null, 0, 65535]

    - name: Create new nat gateway and allocate new EIP if a nat gateway does not yet exist in the subnet.
      ec2_vpc_nat_gateway:
        state: present
        subnet_id: subnet-0ab5d5c734e5373b0
        eip_address: 52.207.181.166
        wait: true
        region: "{{ region }}"
        if_exist_do_not_create: true
        tags:
          Name: Karim-eip
      register: new_nat_gateway
    
    - name: Create Route Table
      ec2_vpc_route_table:
        vpc_id: "{{ vpc_id }}" 
        region: "{{ region }}"
        state: "{{ state }}" 
        tags:
          Name: "{{ route_table_name }}"
        subnets: [ "{{ subnet_result.subnet.id }}" ]
        routes:
          - dest: "{{ destinationCidrBlock }}" 
            nat_gateway_id: "{{ new_nat_gateway.nat_gateway_id }}"
      register: public_route_table

    # - name: Create EC2 Instance
    #   ec2_instance:
    #     name: "{{ instance_name }}"
    #     instance_type: t3.small
    #     image_id: ami-05c13eab67c5d8861
    #     wait: yes
    #     aws_region: "{{ region }}"
    #     security_group: "{{ security_group_result.group_id }}"
    #     key_name: karim-new-key
    #     count: 1
    #     vpc_subnet_id: "{{ subnet_result.subnet.id }}"
    #     network:
    #       assign_public_ip: no
    #     tags:
    #       entity: numfactory
    #       ephemere: oui
    #       owner: kkameli@thenuumfactory.fr
    #   register: ec2_result

    # - name: Create EC2 Instance 2
    #   ec2_instance:
    #     name: "{{ instance_name }} slave"
    #     instance_type: t3.small
    #     image_id: ami-05c13eab67c5d8861
    #     wait: yes
    #     aws_region: "{{ region }}"
    #     security_group: "{{ security_group_result.group_id }}"
    #     key_name: karim-new-key
    #     count: 1
    #     vpc_subnet_id: "{{ subnet_result2.subnet.id }}"
    #     network:
    #       assign_public_ip: no
    #     tags:
    #       entity: numfactory
    #       ephemere: oui
    #       owner: kkameli@thenuumfactory.fr
    #   register: ec2_result2
    
    # - name: Create the ELB only listening over port 80
    #   ec2_elb_lb:
    #   name: Karim-load-balancer
    #     state: present
    #     region: "{{ region }}"
    #     zones:
    #       - "{{ zone }}"
    #       - "{{ zone2 }}"
    #     listeners:
    #       - protocol: http
    #         load_balancer_port: 80
    #         instance_port: 80
    #   register: elb